/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import util.Triple;

/**
 * @author Andy Ruiz
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
public class GUICalculateBudget extends javax.swing.JFrame {

	private static final long serialVersionUID = 8729459360394763884L;
	protected DefaultListModel selctingItemsJList = new DefaultListModel();    
    protected DefaultListModel selctedItemsJList = new DefaultListModel(); 
    protected BudgetCalculator windowManager;

    /**
     * Creates new form FazPrevisao
     */
    public GUICalculateBudget() {
        initComponents();
    }

	public void setup(BudgetCalculator manager){
        windowManager = manager;
        this.setVisible(false);
        rubricJList.setModel(selctingItemsJList);
        rubricSelectedJList.setModel(selctedItemsJList);
        selectButton.setEnabled(false);
        unselectButton.setEnabled(false);
        percentageButton.setEnabled(false);
        constantButton.setEnabled(false);
        manterValueButton.setEnabled(false);
        mesesPrevisao.setEnabled(false);
        savePrevision.setEnabled(false);
        
        
    }
    
    public void openWindow(){
        this.setVisible(true);
        clearLists();
        mesesPrevisao.setEnabled(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({ "serial" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane2 = new javax.swing.JDesktopPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableRubricas = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        rubricSelectedJList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        rubricJList = new javax.swing.JList<>();
        unselectButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        percentageButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAvisos = new javax.swing.JTextPane();
        manterValueButton = new javax.swing.JButton();
        valorAcrescentar = new javax.swing.JFormattedTextField();
        constantButton = new javax.swing.JButton();
        mesesPrevisao = new javax.swing.JComboBox<>();
        savePrevision = new javax.swing.JButton();
        textDate = new javax.swing.JTextField();
        buttonDate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableRubricas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rubrica", "Descrição", "Valor ano passado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableRubricas);

        rubricSelectedJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(rubricSelectedJList);

        rubricJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(rubricJList);

        unselectButton.setText("Unselect");
        unselectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unselectButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        percentageButton.setText("Acrescentar Porcentagem");
        percentageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageButtonActionPerformed(evt);
            }
        });

        textAvisos.setEditable(false);
        textAvisos.setBackground(new java.awt.Color(204, 204, 204));
        textAvisos.setBorder(null);
        textAvisos.setAlignmentY(1.0F);
        textAvisos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textAvisos.setDisabledTextColor(new java.awt.Color(0, 102, 153));
        textAvisos.setEnabled(false);
        jScrollPane4.setViewportView(textAvisos);

        manterValueButton.setText("Manter mesmo valor");
        manterValueButton.setMaximumSize(new java.awt.Dimension(157, 23));
        manterValueButton.setMinimumSize(new java.awt.Dimension(157, 23));
        manterValueButton.setPreferredSize(new java.awt.Dimension(157, 23));
        manterValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manterValueButtonActionPerformed(evt);
            }
        });

        constantButton.setText("Fixar Constante");
        constantButton.setMaximumSize(new java.awt.Dimension(157, 23));
        constantButton.setMinimumSize(new java.awt.Dimension(157, 23));
        constantButton.setPreferredSize(new java.awt.Dimension(157, 23));
        constantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                constantButtonActionPerformed(evt);
            }
        });

        mesesPrevisao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro" }));
        mesesPrevisao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesesPrevisaoActionPerformed(evt);
            }
        });

        savePrevision.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/oie_transparent (2).png"))); // NOI18N
        savePrevision.setText("Finalizar Previsao         ");
        savePrevision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePrevisionActionPerformed(evt);
            }
        });

        textDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDateActionPerformed(evt);
            }
        });

        buttonDate.setText("Validar Data");
        buttonDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDateActionPerformed(evt);
            }
        });

        jDesktopPane2.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(unselectButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(selectButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(percentageButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(manterValueButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(valorAcrescentar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(constantButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(mesesPrevisao, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(savePrevision, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(textDate, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane2.setLayer(buttonDate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane2Layout = new javax.swing.GroupLayout(jDesktopPane2);
        jDesktopPane2.setLayout(jDesktopPane2Layout);
        jDesktopPane2Layout.setHorizontalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                        .addComponent(percentageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(manterValueButton, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(valorAcrescentar, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(constantButton, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jDesktopPane2Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonDate, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(selectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(unselectButton, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                                .addGap(36, 36, 36)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 43, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mesesPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                        .addComponent(savePrevision, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127))))
        );
        jDesktopPane2Layout.setVerticalGroup(
            jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(mesesPrevisao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(savePrevision))
                    .addGroup(jDesktopPane2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                                .addComponent(selectButton)
                                .addGap(48, 48, 48)
                                .addComponent(unselectButton)
                                .addGap(13, 13, 13))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane2Layout.createSequentialGroup()
                                .addComponent(buttonDate)
                                .addGap(44, 44, 44)
                                .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(71, 71, 71)
                        .addComponent(valorAcrescentar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jDesktopPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(percentageButton)
                            .addComponent(manterValueButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(constantButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(104, 104, 104)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    * Evento quando aperta o botao de criar previsao adicionando porcentagem
    */
    private void percentageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageButtonActionPerformed
        if(selctedItemsJList.size() > 0){
            try {
                float percentageValue = Float.parseFloat(valorAcrescentar.getText());
                String selectedMonth = (String) mesesPrevisao.getSelectedItem();
                List <Integer> codes = new ArrayList();
                for (int i = 0; i < selctedItemsJList.size(); i++) {
                    codes.add((Integer) selctedItemsJList.get(i));
                }
                windowManager.calculatePercentagePrevision(percentageValue, codes, selectedMonth);
                showTextUser("Foi acrescentado " + String.format("%.2f",percentageValue) + "% aos valores de todas as rubricas selecionadas para a previsão do mês de " + mesesPrevisao.getSelectedItem());
                selctedItemsJList.clear();
                if(selctingItemsJList.isEmpty()){
                    allItemsCompleted(selectedMonth);
                }
            } catch (NumberFormatException e) {
                showTextUser("Entrada inválida! Por favor digite apenas valores float!");
            }
        }
        else{
            showTextUser("Por favor selecione rubricas para fazer a previsao");
        }
        
    }//GEN-LAST:event_percentageButtonActionPerformed
    /*
    * Evento quando aperta o botao de criar previsao usando valor fixo
    */
    private void constantButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constantButtonActionPerformed
        if(selctedItemsJList.size() > 0){
            try {
            float constantValue = Float.parseFloat(valorAcrescentar.getText());
            String selectedMonth = (String) mesesPrevisao.getSelectedItem();
            List <Integer> codes = new ArrayList();
            for (int i = 0; i < selctedItemsJList.size(); i++) {
                codes.add((Integer) selctedItemsJList.get(i));
            }
            windowManager.calculateConstantPrevision(constantValue, codes, selectedMonth);
            showTextUser("Foi fixado " + String.format("%.2f",constantValue) + " R$ aos valores de todas as rubricas selecionadas para a previsão do mês de " + mesesPrevisao.getSelectedItem());
            selctedItemsJList.clear();
            if(selctingItemsJList.isEmpty()){
                allItemsCompleted(selectedMonth);
            }
            } catch (NumberFormatException e) {
                showTextUser("Entrada inválida! Por favor digite apenas valores float!");
            }
        }
        else{
            showTextUser("Por favor selecione rubricas para fazer a previsao");
        }
    }//GEN-LAST:event_constantButtonActionPerformed

    /*
    * Evento quando aperta o botao de criar previsao mantendo valores
    */
    private void manterValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manterValueButtonActionPerformed
        if(selctedItemsJList.size() > 0){
            try {
            String selectedMonth = (String) mesesPrevisao.getSelectedItem();
            List <Integer> codes = new ArrayList();
            for (int i = 0; i < selctedItemsJList.size(); i++) {
                codes.add((Integer) selctedItemsJList.get(i));
            }
            windowManager.calculateCopyValuesPrevision(0, codes, selectedMonth);
            showTextUser("Foram mantidos os mesmos valores de todas as rubricas selecionadas para a previsÃ£o do mês de " + mesesPrevisao.getSelectedItem());
            selctedItemsJList.clear();
            if(selctingItemsJList.isEmpty()){
                allItemsCompleted(selectedMonth);
            }
            } catch (NumberFormatException e) {
                showTextUser("Entrada invÃ¡lida! Por favor digite apenas valores float!");
            }
        
        }
        else{
            showTextUser("Por favor selecione rubricas para fazer a previsao");
        }
    }//GEN-LAST:event_manterValueButtonActionPerformed

    /*
    * Quando toda a lista de possiveis selecionadas for vazia acabaram todos os itens, estao todos completos
    */
    private void allItemsCompleted(String month){
        windowManager.monthPrevisionCompleted(month);
        mesesPrevisao.setEnabled(true);
       showTextUser(textAvisos.getText() + "\nA previsao de " + month +  " foi completada, escolha outro mês para calcular.");
    }
    /*
    * Quando o usuario quiser encerrar seu calculo de previsoes se avisa o windowManager
    */
    private void savePrevisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePrevisionActionPerformed
        List <Integer> remainingCodes = new ArrayList();
        for (int i = 0; i < selctedItemsJList.size(); i++) {
                remainingCodes.add((Integer) selctedItemsJList.get(i));
            }
        for (int i = 0; i < selctingItemsJList.size(); i++) {
                remainingCodes.add((Integer) selctingItemsJList.get(i));
            }
        windowManager.saveCalculatedPrevision(remainingCodes,(String) mesesPrevisao.getSelectedItem());
    }//GEN-LAST:event_savePrevisionActionPerformed

    /*
    * Evento quando aperta o botao de criar previsao adicionando porcentagem
    */
    private void mesesPrevisaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesesPrevisaoActionPerformed
        windowManager.changeCalculatorMonthItems((String)mesesPrevisao.getSelectedItem());
    }//GEN-LAST:event_mesesPrevisaoActionPerformed

    /*
    * Passa os itens selecionados de uma caixa/lista a outra
    */
    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        List<String> selectedCodes = rubricJList.getSelectedValuesList();
        for (int i = 0; i < selectedCodes.size(); i++) {
            selctedItemsJList.addElement(selectedCodes.get(i));
            selctingItemsJList.removeElement(selectedCodes.get(i));
        }
    }//GEN-LAST:event_selectButtonActionPerformed
    /*
    * Devolve os itens da lista de selecionas para a primeira lista/caixa
    */
    private void unselectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unselectButtonActionPerformed
        List<String> selectedCodes = rubricSelectedJList.getSelectedValuesList();
        for (int i = 0; i < selectedCodes.size(); i++) {
            selctingItemsJList.addElement(selectedCodes.get(i));
            selctedItemsJList.removeElement(selectedCodes.get(i));
        }
    }//GEN-LAST:event_unselectButtonActionPerformed

    private void textDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textDateActionPerformed

    /*
    * valida data passada
    */
    private void buttonDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDateActionPerformed
        String date = textDate.getText();
        windowManager.validateDate(date);
    }//GEN-LAST:event_buttonDateActionPerformed

    /**
     * Dada uma lista de triplas preenche a tabela com os valores de cada tupla
     * @param items
     * @param hasToShow
     */
    public void fillRubricLists(List<Triple> items, boolean hasToShow){
        if( items.isEmpty()){
            showTextUser("Para o mês de " + mesesPrevisao.getSelectedItem() +" já¡ foi a previsÃ£o para todas os itens. Escolha outro mês");
        }
        else{
            if(hasToShow){
            mesesPrevisao.setEnabled(true);
            }
            else{
               mesesPrevisao.setEnabled(false); 
            }
            clearLists();
            DefaultTableModel model = new DefaultTableModel(new String[] { "Rubrica", "Descrição","Valor ano passado"},0);     
            for (int i = 0; i < items.size(); i++) {
                selctingItemsJList.addElement(items.get(i).x);
                model.addRow(new Object[]{ items.get(i).x,items.get(i).y,items.get(i).z});
                
            }      
            tableRubricas.setModel(model);
        }
        
    }
    
    public void enableButtons(){
        selectButton.setEnabled(true);
        unselectButton.setEnabled(true);
        percentageButton.setEnabled(true);
        constantButton.setEnabled(true);
        manterValueButton.setEnabled(true);
        mesesPrevisao.setEnabled(true);
        savePrevision.setEnabled(true);
        textDate.setEnabled(false);
        buttonDate.setEnabled(false);
        showTextUser("Selecione o mês e faça a previsao para todas as rubricas. Aí poderá escolher outro mês.\n" +
"Se quiser diminuir um valor basta inserir  um valor negativo ao que será acrescentado.\n" +
"Ao finalizar a previsão todas as previsoes de meses que faltaram de rubricas serão orçados\n" +
"automaticamente como mantendo o valor. ");
    }
    
    private void clearLists(){
        selctingItemsJList.clear();
        selctedItemsJList.clear();  
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDate;
    private javax.swing.JButton constantButton;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton manterValueButton;
    private javax.swing.JComboBox<String> mesesPrevisao;
    private javax.swing.JButton percentageButton;
    private javax.swing.JList<String> rubricJList;
    private javax.swing.JList<String> rubricSelectedJList;
    private javax.swing.JButton savePrevision;
    private javax.swing.JButton selectButton;
    private javax.swing.JTable tableRubricas;
    private javax.swing.JTextPane textAvisos;
    private javax.swing.JTextField textDate;
    private javax.swing.JButton unselectButton;
    private javax.swing.JFormattedTextField valorAcrescentar;
    // End of variables declaration//GEN-END:variables

    
    /*
    * MÃ©todo para mostrar mensagem ap isiarop
    */
    public void showTextUser(String message){
        textAvisos.setText(message);
    }
    /*
    * MÃ©todo quando o usuario errar a data
    */
   public void wrongDate() {
        showTextUser("Data incorreta! Por favor insira data no formato mm/dd");
    }

    public void closeWindow() {
        this.setVisible(false);
    }
    
}

